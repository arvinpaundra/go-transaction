// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	dto "clean-arch/internal/dto"

	gin "github.com/gin-gonic/gin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"

	model "clean-arch/internal/model"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CurlGoogle provides a mock function with given fields:
func (_m *UserRepository) CurlGoogle() (*http.Response, error) {
	ret := _m.Called()

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func() (*http.Response, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *http.Response); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx
func (_m *UserRepository) FindAll(ctx *gin.Context) ([]*model.User, error) {
	ret := _m.Called(ctx)

	var r0 []*model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) ([]*model.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) []*model.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, ID
func (_m *UserRepository) FindById(ctx *gin.Context, ID int) (*model.User, error) {
	ret := _m.Called(ctx, ID)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, int) (*model.User, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, int) *model.User); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, int) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, input
func (_m *UserRepository) Insert(ctx *gin.Context, input dto.InsertUserRequest) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, dto.InsertUserRequest) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, input, ID
func (_m *UserRepository) Update(ctx *gin.Context, input dto.UpdateUserRequest, ID int) error {
	ret := _m.Called(ctx, input, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, dto.UpdateUserRequest, int) error); ok {
		r0 = rf(ctx, input, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
